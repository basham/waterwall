<?xml version="1.0" encoding="utf-8"?>
<mx:Window
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="vertical" width="900" height="600" showStatusBar="false" backgroundColor="#FFFFFF"
	paddingBottom="0" paddingLeft="0" paddingTop="0" paddingRight="0" frameRate="30" showTitleBar="false"
	windowComplete="init()" windowResize="onResize()">

<!--backgroundGradientColors="[0xD0E8FF, 0xFFFFFF]"-->

	<mx:Script>
		<![CDATA[

			import edu.iu.vis.utils.Normalize;
			
			import io.radical.waterwall.messaging.MessageTypes;
			import io.radical.waterwall.messaging.WWMessageBoard;
			import io.radical.waterwall.buoy.Buoy;
			import io.radical.waterwall.net.WWIncomingConnection;
			import io.radical.waterwall.net.WWAutoOutgoingConnection;
			import io.radical.waterwall.events.FillEvent;
			import io.radical.waterwall.events.WaveEvent;
			import io.radical.waterwall.water.Water;
			import io.radical.waterwall.utils.Log;
			
			import mx.events.ResizeEvent;
			import mx.core.UIComponent;

			import flash.events.MouseEvent;
			import flash.utils.getTimer;

			private var water:Water;
			private var water2:Water;
			private var bg_water:Water;
			private var buoy:Buoy;
			private var board:WWMessageBoard;
			
			private var fillLog:Log = new Log( 50 );
			private var ampLog:Log = new Log( 50 );
			
			
			[Bindable]
			private var fps:Number = 0;
			[Bindable]
			public var lowestFPS:uint = 0;
			
			[Bindable]
			public var ff:uint = 0;
			private var f:uint = 0;
			[Bindable]
			public var aa:Number = 0;
			[Bindable]
			public var af:Number = 0;
			
			public function init():void {
				
				bg_water = new Water( this.width, this.height );
				bg_water.colors = [ 0xB0DAFF, 0xB0DAFF, 0xB0DAFF ];
				water2 = new Water( this.width, this.height );
				water2.colors = [ 0xDAEEFF, 0xDAEEFF, 0xDAEEFF ];
				water = new Water( this.width, this.height );
				water.colors = [ 0x3285B4, 0x3285B4, 0x3285B4 ];
				
				bg_water.alpha = water2.alpha = water.alpha = .6;
				
				bg_water.maxFill = water2.maxFill = water.maxFill = .9;
				bg_water.minFill = water2.minFill = water.minFill = .05;
				 
				var buoyWidth:Number = 20;
				buoy = new Buoy( buoyWidth );
				buoy.anchorX = this.width / 2;
				buoy.borderRadius = this.width * .3;
				
				board = new WWMessageBoard();
				board.dynamicAnchor( buoy, buoyWidth * .5, - buoyWidth * .25 );
				
				water2.addFloatingItem( buoy );
				
				addDisplayObject( board );
				addDisplayObject( water2 );
				addDisplayObject( bg_water );
				addDisplayObject( water );
				
				this.addEventListener( FillEvent.FILL_UPDATE, onFillUpdate );
				this.addEventListener( WaveEvent.WAVE_INJECTION, onWaveInjection );
				this.addEventListener( Event.ENTER_FRAME, onEnterFrame );

				var timer:Timer = new Timer( 1000 );
				timer.start();
				timer.addEventListener( TimerEvent.TIMER, onTimerFPS );
				
				fullScreen();
			}
			
			public function fullScreen():void {
				this.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				onResize(true);
			}
			
			private function onTimerFPS( e:TimerEvent ):void {
				ff = f;
				f = 0;
				if ( ff < lowestFPS || lowestFPS == 0 )
					lowestFPS = ff;
			}
			
			private function onEnterFrame(e:Event):void {
				f++;

				var latestFill:Number = fillLog.length > 0 ? fillLog.index(0) : 0;
				fillLog.push( latestFill );
				var avgFill:Number = fillLog.average();
				water.fill = bg_water.fill = water2.fill = avgFill;
				
				var latestAmp:Number = ampLog.length > 0 ? ampLog.index(0) : 0;
				ampLog.push( latestAmp * .95 );
				var avgAmp:Number = ampLog.average();
				//trace( "**************", avgFill );
				
				aa = Number( avgAmp.toFixed( 3 ) );
				af = Number( avgFill.toFixed( 3 ) );
				
				if ( board.isQueueEmpty() ) {
	
					if ( board.secondsSinceLastMessage() > 10 ) {
						if ( avgFill == 0 )
							message( MessageTypes.EMPTY );
						else if ( avgFill < .06 && avgFill > 0 )
							message( MessageTypes.FEW );
					}
					
					if ( board.secondsSinceLastMessage() > 5 && avgAmp > 6 )
						message( MessageTypes.STRONG_AMPLITUDE );
					
					if ( board.secondsSinceLastMessage() > 25 )
						message( MessageTypes.AGNOSTIC );
				}
			}
			
			private function message( messageType:String ):void {
				queue( MessageTypes.RandomMessage( messageType ) );
			}
			
			private function queue( message:String ):void {
				trace( "&&&&&&&", message );
				board.queue( message );
			}
			
			private function onFillUpdate( e:FillEvent ):void {
				fillLog.push( e.data );
			}
			
			private function onWaveInjection( e:WaveEvent ):void {
				ampLog.push( e.amplitude );
				water.injectWave( e.amplitude, e.x );
				water2.injectWave( e.amplitude * Math.random(), e.x + ( Math.random() > .5 ? 1 : -1 ) * ( Math.random() * .1 ) );
				bg_water.injectWave( e.amplitude * Math.random(), e.x + ( Math.random() > .5 ? 1 : -1 ) * ( Math.random() * .1 ) );
			}
			
			private function onResize( fullScreened:Boolean = false ):void {
				var w:uint = fullScreened ? this.nativeWindow.bounds.width : this.width;
				var h:uint = fullScreened ? this.nativeWindow.bounds.height : this.height;
				water.setSize( w, h );
				water2.setSize( w, h );
				bg_water.setSize( w, h );
			}
			
			private function addDisplayObject( child:DisplayObject ):void {
				var uic:UIComponent = new UIComponent();
				uic.addChild(child);
				box.addChild(uic);	
			}

		]]>
	</mx:Script>
	
	
	<mx:VBox id="box" width="100%" height="100%" verticalGap="0" />
	
</mx:Window>
