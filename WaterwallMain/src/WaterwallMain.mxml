<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="horizontal" width="780" height="460" backgroundColor="#DDDDDD" horizontalGap="10" title="Waterwall"
	paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" frameRate="30"
	status="Server FPS: {fps} | Camera FPS: {cameraFPS} | Client FPS: {client.ff} | Client Lowest FPS: {client.lowestFPS} | Avg Fill: {client.af} | Avg Amplitude: {client.aa}" 
	creationComplete="init()" closing="closing()">


	<mx:Script>
		<![CDATA[
		
			import io.radical.waterwall.events.WaveEvent;
			import io.radical.waterwall.events.FillEvent;
		
			import edu.iu.vis.tracking.MotionTracking;
			import edu.iu.vis.tracking.Region;
			import edu.iu.vis.tracking.RegionAdjacencyGraph;
			import edu.iu.vis.utils.ColorUtil;
			import edu.iu.vis.utils.NumberUtil;
			import edu.iu.vis.utils.Normalize;
			import edu.iu.vis.utils.TrigUtil;
			
			import flash.display.BlendMode;
			
			private const CAM_FPS:uint = 10;
			
			[Bindable]
			private var w:Number = 320;
			[Bindable]
			private var h:Number = 240;

			private var frame:uint = 0;
			[Bindable]
			private var fps:uint = 0;
			[Bindable]
			private var cameraFPS:uint = 0;
			[Bindable]
			private var paused:Boolean = false;
			
			private var video:Video;
			private var cam:Camera;
			
			private var camData:BitmapData;
			private var composite:BitmapData;
			
	   		private var tracker:MotionTracking;
	   		private var keyer:MotionTracking;
	   		
	   		private var cameraRotation:uint = 0;
			private var matrix:Matrix = new Matrix();
	   		
	   		[Bindable]
			private var client:WaterwallClient = new WaterwallClient();
			
			
			/**
			 * 
			 * INITIALIZE
			 * 
			 * */
			 
			private function init():void {

				setupCamera();
				setup();
				
				this.addEventListener( Event.ENTER_FRAME, onEnterFrame );
				
				var timer:Timer = new Timer( 1000 );
				timer.start();
				timer.addEventListener( TimerEvent.TIMER, onSecondTimer );
				
				var camTimer:Timer = new Timer( 1000 / CAM_FPS );
				camTimer.start();
				camTimer.addEventListener( TimerEvent.TIMER, onCamTimer );
			}
			
			private function setupCamera():void {
				cam = Camera.getCamera();
				cam.setMode( cam.width, cam.height, 24 );
				
				video = new Video( w, h );
				video.attachCamera( cam );
			}
			
			private function setup():void {
				setupTracker();
				setupScreen();
			}
			
			private function setupTracker():void {
				tracker = new MotionTracking( w, h, 32, 1 );
				motionBlurSlider.value = tracker.blur;
				motionSensitivitySlider.value = tracker.sensitivity;
				
				keyer = new MotionTracking( w, h, 20, 20 );
				keyBlurSlider.value = keyer.blur;
				keySensitivitySlider.value = keyer.sensitivity;
			}
			
			private function setupScreen():void {
				camData = new BitmapData( w, h );
				composite = new BitmapData( w, h );
				cameraScreen.source = new Bitmap( composite );
			}
			
			
			/**
			 * 
			 * EVENT HANDLERS
			 * 
			 * */
			 
			private function closing():void {
				client.close();
			}
			
			private function onEnterFrame( event:Event ):void {
				frame++;
				cameraFPS = cam.currentFPS;
			}
			
			private function onSecondTimer( e:TimerEvent ):void {;
				fps = frame;
				frame = 0;
			}
			
			private function onCamTimer( event:Event ):void {
				if ( paused )
					return;
				camData.draw( video, matrix );
				calculateMotionWaves();
				calculateFill();
				calculateRandomWaves();
				compositeScreens();
			}
			
			
			/**
			 * 
			 * CALCULATIONS
			 * 
			 * */
			 
			private function calculateMotionWaves():void {
				
				if ( !sendWavesCheckbox.selected )
					return;
				
				tracker.motionTrack( camData );
				var rag:RegionAdjacencyGraph = tracker.graph();
				
				for each( var r:Region in rag.regions ) {
					if ( !r.bit ) {
						
						//var y:uint = r.centroid.y / h;
						var x:Number = r.centroid.x / w;
						var sa:Number = r.bounds.width * r.bounds.height;
						var perc:Number = sa / ( this.w * this.h );
						var amplitudeRange:Array = ampSlider.values;
						var ampLow:Number = amplitudeRange[0];
						var ampHigh:Number = amplitudeRange[1];
						var amplitude:Number = perc * ( ampHigh - ampLow ) + ampLow;
						
						client.dispatchEvent( new WaveEvent( amplitude, x ) );
					}
				}
			}
			
			private function calculateFill():void {
				
				if ( !sendFillCheckbox.selected )
					return;
				
				if ( fillOverride.selected ) {
					client.dispatchEvent( new FillEvent( fillSlider.value / 100 ) );
					return;
				}
				
				keyer.keyTrack( camData );
				
				var fillData:BitmapData = keyer.filteredBitmapData;
				var w:uint = 20;
				var h:uint = ( fillData.height / fillData.width ) * w;
				var sx:Number = w / fillData.width;
				var sy:Number = h / fillData.height;
				var matrix:Matrix = new Matrix( sx, 0, 0, sy );
				var data:BitmapData = new BitmapData( w, h );
				data.draw( fillData, matrix );
				
				var averageColor:uint = ColorUtil.AverageColor( data );
				var fill:Number = ColorUtil.HexToLightness( averageColor );
				
				if ( sendFillCheckbox.selected )
					client.dispatchEvent( new FillEvent( fill ) );
					
				fillSlider.value = fill * 100;
				
				if ( fill == 0 && autoKey.selected )
					keyer.key();
			}
			
			private function calculateRandomWaves():void {
				
				var ampLow:Number = randomAmpSlider.values[0];
				var ampHigh:Number = randomAmpSlider.values[1];
				var ampRand:Number = Math.random();
				var amplitude:Number = ampRand * ( ampHigh - ampLow ) + ampLow;
				
				var freqLow:Number = randomLowFreqSlider.value;
				var freqHigh:Number = randomHighFreqSlider.value;
				
				/**
				 * y = mx + b
				 * y = frequency
				 * m = slope
				 * x = amplitude
				 * b = y-axis intersection
				 * */
				var m:Number = ( freqLow - freqHigh ) / ( ampLow - ampHigh );
				var b:Number = freqLow - m * ampLow;
				
				var frequency:Number = m * amplitude + b;
				
				var inject:Boolean = Math.random() * 100 <= frequency;
				
				var x:Number = Math.random();
				
				if ( inject && sendRandomCheckbox.selected )
					client.dispatchEvent( new WaveEvent( amplitude, x ) );
			}
			
			private function compositeScreens():void {
				
				composite.draw( video, matrix );
				
				var blueCT:ColorTransform = new ColorTransform( 1, 1, 1, 1, -255, -255 ); // #0000FF Blue
				var redCT:ColorTransform = new ColorTransform( 1, 1, 1, 1, 0, -255, -255 ); // #0000FF Red
				
				if ( displayPresence.selected )
					composite.draw( keyer.filteredBitmapData, null, blueCT, BlendMode.SCREEN );
				
				if ( displayMotion.selected )
					composite.draw( tracker.filteredBitmapData, null, redCT, BlendMode.SCREEN );
			}
			
			
			/**
			 * 
			 * CONTROLS
			 * 
			 * */
			
			private function rotateCamera():void {
				
				cameraRotation += 90;
				cameraRotation %= 360;
				
				var temp:uint = w;
				w = h;
				h = temp;

				matrix = new Matrix();
				matrix.rotate( TrigUtil.Radians( cameraRotation ) );
				
				switch( cameraRotation ) {
					case 90:
						matrix.translate( w, 0 );
						break;
					case 180:
						matrix.translate( w, h );
						break;
					case 270:
						matrix.translate( 0, h );
						break;
				}
				
				setup();
			}
			
			private function key():void {
				keyer.key();
			}
			
			private function motionBlurChange():void {
				tracker.blur = motionBlurSlider.value;
			}
			
			private function motionSensitivityChange():void {
				tracker.sensitivity = motionSensitivitySlider.value;
			}
			
			private function keyBlurChange():void {
				keyer.blur = keyBlurSlider.value;
			}
			
			private function keySensitivityChange():void {
				keyer.sensitivity = keySensitivitySlider.value;
			}
			
			private function togglePause():void {
				paused = !paused;
			}
			
			private function launchClient():void {
				client.open();
				client.move( -1000, 0 );
			}
			
		]]>
	</mx:Script>
	
	
	<mx:Style>
	
		Label {
			color: #333333; }
		
		FormHeading {
			color: #000000;
			labelWidth: 80;
			paddingTop: 5; }
			
		FormItem {
			color: #333333;
			labelWidth: 80; }
		
		HSlider {
			showTrackHighlight: true; }
			
		TabNavigator {
			paddingTop: 1;
			paddingBottom: 1;
			paddingLeft: 1;
			paddingRight: 1; }
			
		.block {
			paddingTop: 10;
			paddingBottom: 10;
			paddingLeft: 10;
			paddingRight: 10;
			backgroundColor: #CCCCCC;
			cornerRadius: 4;
			borderStyle: "solid"; }
			
		.settingGroup {
			paddingTop: 10;
			paddingBottom: 10;
			paddingLeft: 10;
			paddingRight: 10;
			backgroundAlpha: .2; }
		
	</mx:Style>
	
	
	<mx:VBox styleName="block" verticalGap="10" width="100%" height="100%">
	
		<mx:Label text="Camera" fontSize="14" />
	
		<mx:Box width="100%" horizontalAlign="center">
			<mx:Box width="{Math.max( w, h ) + 4}" height="{Math.max( w, h ) + 4}" backgroundColor="#BBBBBB"
				horizontalAlign="center" verticalAlign="middle">
				<mx:Image id="cameraScreen" width="{w}" height="{h}" />
			</mx:Box>
		</mx:Box>
		
		<mx:HBox width="100%">
			
			<mx:Button label="{ paused ? 'Resume' : 'Pause' }" width="80" click="togglePause()" />
			<mx:Button label="Key" click="key()" width="80" />
			<mx:Button label="Rotate" click="rotateCamera()" width="80" />

		</mx:HBox>
		
	</mx:VBox>

	<mx:VBox styleName="block" verticalGap="10" width="400" height="100%">
	
		<mx:Label text="Settings" fontSize="14" />
		
		<mx:TabNavigator creationPolicy="all" width="100%" height="100%" resizeToContent="true">

			<mx:VBox label="General" styleName="settingGroup" width="100%" backgroundColor="#FFFF00">
				
				<mx:FormHeading label="Camera" />
	
				<mx:FormItem label="Display">
					<mx:CheckBox id="displayPresence" label="Presence" selected="true" />
					<mx:CheckBox id="displayMotion" label="Motion" selected="true" />
				</mx:FormItem>
				
				<mx:FormItem label="Key">
					<mx:CheckBox id="autoKey" label="Auto Key" selected="true" />
				</mx:FormItem>
				
				<mx:FormHeading label="Output" />
				
				<mx:FormItem label="Send">
					<mx:CheckBox id="sendFillCheckbox" label="Fill" selected="true" />
					<mx:CheckBox id="sendWavesCheckbox" label="Motion Waves" selected="true" />
					<mx:CheckBox id="sendRandomCheckbox" label="Random Waves" selected="true" />
				</mx:FormItem>
				
			</mx:VBox>
							
			<mx:VBox label="Presense" styleName="settingGroup" width="100%" backgroundColor="#0000FF">
				
				<mx:FormHeading label="Video" />
	
				<mx:FormItem label="Blur" width="100%">
					<mx:HSlider id="keyBlurSlider" width="100%" minimum="0" maximum="100"
						tickInterval="10" snapInterval="1" labels="['Min', 'Max']" change="keyBlurChange()" />
				</mx:FormItem>
		
				<mx:FormItem label="Sensitivity" width="100%">
					<mx:HSlider id="keySensitivitySlider" width="100%" minimum="0" maximum="99"
						tickInterval="5" snapInterval="1" labels="['Min', 'Max']" change="keySensitivityChange()" />
				</mx:FormItem>
				
				<mx:FormHeading label="Fill" />
				
				<mx:FormItem label="Fill" width="100%">
					<mx:HSlider id="fillSlider" width="100%" minimum="0" maximum="100" tickInterval="10" labels="['0%', '100%']" />
					<mx:CheckBox id="fillOverride" label="Override" selected="false" />
				</mx:FormItem>
				
			</mx:VBox>
			
			<mx:VBox label="Motion" styleName="settingGroup" width="100%" backgroundColor="#FF0000">
				
				<mx:FormHeading label="Video" />
				
				<mx:FormItem label="Blur" width="100%">
					<mx:HSlider id="motionBlurSlider" width="100%" minimum="0" maximum="100"
						tickInterval="10" snapInterval="1" labels="['Min', 'Max']" change="motionBlurChange()" />
				</mx:FormItem>
		
				<mx:FormItem label="Sensitivity" width="100%">
					<mx:HSlider id="motionSensitivitySlider" width="100%" minimum="0" maximum="50"
						tickInterval="5" snapInterval="1" labels="['Min', 'Max']" change="motionSensitivityChange()" />
				</mx:FormItem>
				
				<mx:FormHeading label="Waves" />
				
				<mx:FormItem label="Amplitude" width="100%">
					<mx:HSlider id="ampSlider" width="100%" minimum="0" maximum="30"
						tickInterval="5" snapInterval="1" thumbCount="2" values="[3, 12]" labels="['0', '30']" />
				</mx:FormItem>
				
			</mx:VBox>
			
			<mx:VBox label="Random Disturbance" styleName="settingGroup" width="100%" backgroundColor="#00FF00">
				
				<mx:FormHeading label="Frequency" />
				
				<mx:FormItem label="Low" width="100%">
					<mx:HSlider id="randomLowFreqSlider" width="100%" minimum="0" maximum="100"
						tickInterval="5" snapInterval="1" value="2" labels="['0', '100']" />
				</mx:FormItem>
				
				<mx:FormItem label="High" width="100%">
					<mx:HSlider id="randomHighFreqSlider" width="100%" minimum="0" maximum="100"
						tickInterval="5" snapInterval="1" value="2" labels="['0', '100']" />
				</mx:FormItem>
				
				<mx:FormHeading label="Waves" />
				
				<mx:FormItem label="Amplitude" width="100%">
					<mx:HSlider id="randomAmpSlider" width="100%" minimum="0" maximum="30"
						tickInterval="5" snapInterval="1" thumbCount="2" values="[1, 5]" labels="['0', '30']" />
				</mx:FormItem>

			</mx:VBox>
			
		</mx:TabNavigator>
		
		<mx:Button label="Launch Client" width="150" click="launchClient()" />
		
	</mx:VBox>
	
</mx:WindowedApplication>
