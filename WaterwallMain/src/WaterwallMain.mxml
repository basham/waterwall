<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="vertical" width="1045" height="600" backgroundColor="#DDDDDD"
	paddingTop="10" paddingBottom="10" paddingLeft="20" paddingRight="20" frameRate="30"
	status="Server FPS: {ff} | Camera FPS: {fps} | Client FPS: {client.ff} | Client Lowest FPS: {client.lowestFPS} | Avg Fill: {client.af} | Avg Amplitude: {client.aa}" 
	creationComplete="init()" closing="closing()">


	<mx:Script>
		<![CDATA[
		
			import io.radical.waterwall.events.WaveEvent;
			import io.radical.waterwall.events.FillEvent;
			import io.radical.waterwall.net.WWOutgoingConnection;
		
			import edu.iu.vis.tracking.MotionTracking;
			import edu.iu.vis.tracking.Region;
			import edu.iu.vis.tracking.RegionAdjacencyGraph;
			import edu.iu.vis.utils.ColorUtil;
			import edu.iu.vis.utils.NumberUtil;
			import edu.iu.vis.utils.Normalize;
			
			[Bindable]
			private var w:Number = 320;
			[Bindable]
			private var h:Number = 240;
			[Bindable]
			private var fps:uint = 0;
			[Bindable]
			private var paused:Boolean = false;
			
			private var video:Video;
			private var cam:Camera;
			
			private var camData:BitmapData;

	   		private var tracker:MotionTracking;
	   		private var keyer:MotionTracking;
	   
	   		private var outgoing:WWOutgoingConnection;
	   		
	   		private var fillLog:Array = new Array();
	   		
	   		[Bindable]
			private var client:WaterwallClient = new WaterwallClient();
			
			
			private function init():void {
				setupTracker();
				camera();
				setupScreen();
				outgoing = new WWOutgoingConnection( "_WWConnection" );
				addEventListener(Event.ENTER_FRAME, onFrame);
				var timer:Timer = new Timer(1000);
				timer.start();
				timer.addEventListener( TimerEvent.TIMER, onTimerFPS );
			}
			
			private function closing():void {
				client.close();
			}
			
			private function onTimerFPS( e:TimerEvent ):void {
				//trace( '%', f, this.frameRate );
				ff = f;
				f = 0;
				//f %= this.frameRate;
			}
			
			private var f:uint = 0;
			[Bindable]
			private var ff:uint = 0;
			
			private function setupTracker():void {
				tracker = new MotionTracking( w, h, 32, 1 );
				motionBlurSlider.value = tracker.blur;
				motionSensitivitySlider.value = tracker.sensitivity;
				
				keyer = new MotionTracking( w, h, 20, 20 );
				keyBlurSlider.value = keyer.blur;
				keySensitivitySlider.value = keyer.sensitivity;
			}
			
			private function camera():void {
				cam = Camera.getCamera();
				cam.setMode( cam.width, cam.height, 24 );
				
				video = new Video(w, h);
				video.attachCamera(cam);
			}
	
			private function setupScreen():void {
	
				camData = new BitmapData(w, h);
				var bmp2:Bitmap = new Bitmap();
				bmp2.bitmapData = camData;
				img01.source = bmp2;
				
				var bmp:Bitmap = new Bitmap();
				bmp.bitmapData = tracker.filteredBitmapData;
				img02.source = bmp;
				
				var bmp3:Bitmap = new Bitmap();
				bmp3.bitmapData = keyer.filteredBitmapData;
				img03.source = bmp3;
			}
	
			private function onFrame( event:Event ):void {
				f++;
				if ( paused )
					return;
				trackingUpdate();
				fps = cam.currentFPS;
			}
			private var frame:uint = 0;
			private function trackingUpdate():void {
				camData.draw( video );
				calculateMotionWaves();
				calculateFill();
				randomWaves();
				frame++;
			}
			
			private function key():void {
				keyer.key();
			}
			
			private function motionBlurChange():void {
				tracker.blur = motionBlurSlider.value;
			}
			
			private function motionSensitivityChange():void {
				tracker.sensitivity = motionSensitivitySlider.value;
			}
			
			private function keyBlurChange():void {
				keyer.blur = keyBlurSlider.value;
			}
			
			private function keySensitivityChange():void {
				keyer.sensitivity = keySensitivitySlider.value;
			}
			
			private function togglePause():void {
				paused = !paused;
			}
			
			private function calculateMotionWaves():void {
				
				if ( !sendWavesCheckbox.selected )
					return;
				
				tracker.motionTrack( camData );
				var rag:RegionAdjacencyGraph = tracker.graph();
				
				//var motionWaves:Dictionary = new Dictionary(true);
				//var active:Boolean = false;
				
				for each( var r:Region in rag.regions ) {
					if ( !r.bit ) {
						
						var y:uint = r.centroid.y;
						var sa:Number = r.bounds.width * r.bounds.height;
						var perc:Number = sa / ( this.w * this.h );
						var amplitudeRange:Array = ampSlider.values;
						var ampLow:Number = amplitudeRange[0];
						var ampHigh:Number = amplitudeRange[1];
						var amplitude:Number = perc * ( ampHigh - ampLow ) + ampLow;
						
						//motionWaves[ y / h ] = amplitude;
						
						client.dispatchEvent( new WaveEvent( amplitude, y / h ) );
					}
				}
			}
			
			private function calculateFill():void {
				
				if ( !sendFillCheckbox.selected )
					return;
				
				if ( fillOverride.selected ) {
					client.dispatchEvent( new FillEvent( fillSlider.value / 100 ) );
					return;
				}
				
				keyer.keyTrack( camData );
				
				var fillData:BitmapData = keyer.filteredBitmapData;
				var w:uint = 20;
				var h:uint = ( fillData.height / fillData.width ) * w;
				var sx:Number = w / fillData.width;
				var sy:Number = h / fillData.height;
				var matrix:Matrix = new Matrix( sx, 0, 0, sy );
				var data:BitmapData = new BitmapData( w, h );
				data.draw( fillData, matrix );
				
				var averageColor:uint = ColorUtil.AverageColor( data );
				var fill:Number = ColorUtil.HexToLightness( averageColor );
				
				if ( sendFillCheckbox.selected )
					client.dispatchEvent( new FillEvent( fill ) );
					
				fillSlider.value = fill * 100;
			}
			
			private function randomWaves():void {
				
				var ampLow:Number = randomAmpSlider.values[0];
				var ampHigh:Number = randomAmpSlider.values[1];
				var ampRand:Number = Math.random();
				var amplitude:Number = ampRand * ( ampHigh - ampLow ) + ampLow;
				
				var freqLow:Number = randomLowFreqSlider.value;
				var freqHigh:Number = randomHighFreqSlider.value;
				
				/**
				 * y = mx + b
				 * y = frequency
				 * m = slope
				 * x = amplitude
				 * b = y-axis intersection
				 * */
				var m:Number = ( freqLow - freqHigh ) / ( ampLow - ampHigh );
				var b:Number = freqLow - m * ampLow;
				
				var frequency:Number = m * amplitude + b;
				
				var inject:Boolean = Math.random() * 100 <= frequency;
				
				var x:Number = Math.random();
				
				if ( inject && sendRandomCheckbox.selected )
					client.dispatchEvent( new WaveEvent( amplitude, x ) );
			}
			
			private function launchClient():void {
				client.open();
				client.move( -1000, 0 );
			}
			
		]]>
	</mx:Script>

	<mx:HBox width="100%" horizontalGap="20">
	
		<mx:VBox verticalGap="10">
		
			<mx:Label text="Camera" fontSize="14" />
		
			<mx:Image id="img01" width="{w}" height="{h}" />
			
			<mx:HBox width="100%">
				
				<mx:FormItem label="Output">
					<mx:CheckBox id="sendWavesCheckbox" label="Send Waves" selected="true" />
					<mx:CheckBox id="sendFillCheckbox" label="Send Fill" selected="true" />
					<mx:CheckBox id="sendRandomCheckbox" label="Send Random Waves" selected="true" />
				</mx:FormItem>
				
				<mx:VBox width="100%" verticalGap="10" horizontalAlign="right">
					<mx:Button label="{ paused ? 'Play' : 'Pause' }" width="80" click="togglePause()" />
					<mx:Button label="Key" click="key()" width="80" />
					<mx:Button label="Launch Client" width="80" click="launchClient()" />
				</mx:VBox>

			</mx:HBox>

			<mx:VBox width="100%" backgroundColor="#FFFFFF" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">
				
				<mx:FormHeading label="Random Wave Disturbance" labelWidth="80" />
				
				<mx:FormItem label="Amplitude" width="100%" labelWidth="80">
					<mx:HSlider id="randomAmpSlider" width="100%" minimum="0" maximum="30"
						tickInterval="5" snapInterval="1" thumbCount="2" values="[1, 5]" labels="['0', '30']" showTrackHighlight="true" />
				</mx:FormItem>
				
				<mx:FormItem label="Low Frequency" width="100%" labelWidth="80">
					<mx:HSlider id="randomLowFreqSlider" width="100%" minimum="0" maximum="100"
						tickInterval="5" snapInterval="1" value="2" labels="['0', '100']" showTrackHighlight="true" />
				</mx:FormItem>
				
				<mx:FormItem label="High Frequency" width="100%" labelWidth="80">
					<mx:HSlider id="randomHighFreqSlider" width="100%" minimum="0" maximum="100"
						tickInterval="5" snapInterval="1" value="2" labels="['0', '100']" showTrackHighlight="true" />
				</mx:FormItem>

			</mx:VBox>
			
		</mx:VBox>
	
		<mx:VBox verticalGap="10">
			
			<mx:Label text="Motion" fontSize="14" />
			
			<mx:Image id="img02" width="{w}" height="{h}" />
			
			<mx:VBox width="100%">
				
				<mx:HBox width="100%">
					
					<mx:FormItem label="Blur">
						<mx:HSlider id="motionBlurSlider" width="100" minimum="0" maximum="100" showTrackHighlight="true"
							tickInterval="10" snapInterval="1" labels="['Min', 'Max']" change="motionBlurChange()" />
					</mx:FormItem>
			
					<mx:FormItem label="Sensitivity">
						<mx:HSlider id="motionSensitivitySlider" width="100" minimum="0" maximum="50" showTrackHighlight="true"
							tickInterval="5" snapInterval="1" labels="['Min', 'Max']" change="motionSensitivityChange()" />
					</mx:FormItem>
					
				</mx:HBox>
				
				<mx:HBox width="100%">
					
					<mx:FormItem label="Amplitude" width="100%" labelWidth="80">
						<mx:HSlider id="ampSlider" width="100%" minimum="0" maximum="30" showTrackHighlight="true"
							tickInterval="5" snapInterval="1" thumbCount="2" values="[3, 12]" labels="['0', '30']" />
					</mx:FormItem>
					
				</mx:HBox>
				
			</mx:VBox>
			
		</mx:VBox>
		
		<mx:VBox verticalGap="10">
			
			<mx:Label text="Key" fontSize="14" />
			
			<mx:Image id="img03" width="{w}" height="{h}" />
			
			<mx:VBox width="100%">
				
				<mx:HBox width="100%">
	
					<mx:FormItem label="Blur">
						<mx:HSlider id="keyBlurSlider" width="100" minimum="0" maximum="100" showTrackHighlight="true"
							tickInterval="10" snapInterval="1" labels="['Min', 'Max']" change="keyBlurChange()" />
					</mx:FormItem>
			
					<mx:FormItem label="Sensitivity">
						<mx:HSlider id="keySensitivitySlider" width="100" minimum="0" maximum="99" showTrackHighlight="true"
							tickInterval="5" snapInterval="1" labels="['Min', 'Max']" change="keySensitivityChange()" />
					</mx:FormItem>
					
				</mx:HBox>
				
				<mx:FormItem label="Fill History" width="100%" labelWidth="80">
					<mx:HSlider id="fillHistorySlider" width="100%" minimum="0" maximum="100" tickInterval="10" snapInterval="1" showTrackHighlight="true"
						labels="['0', '100']" value="50" />
				</mx:FormItem>
					
				<mx:FormItem label="Fill" width="100%" labelWidth="80">
					<mx:HSlider id="fillSlider" width="100%" minimum="0" maximum="100" tickInterval="10" labels="['0%', '100%']" showTrackHighlight="true" />
					<mx:CheckBox id="fillOverride" label="Override" selected="false" />
				</mx:FormItem>
				
			</mx:VBox>
			
		</mx:VBox>
		
	</mx:HBox>
	
</mx:WindowedApplication>
